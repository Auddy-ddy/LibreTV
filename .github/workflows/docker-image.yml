name: 构建并推送 Docker 镜像

on:
  push:
    branches:
      - main # 或者你的默认分支，例如 master
    tags:
      - 'v*' # 当推送版本标签时触发，例如 v1.0, v2.1.1

jobs:
  build-and-push:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器
    permissions:
      contents: read      # 需要读取仓库内容的权限
      packages: write     # 需要写入 GitHub Packages (ghcr.io) 的权限

    steps:
      - name: 检出代码
        uses: actions/checkout@v4 # 使用官方的 checkout action

      - name: 登录到 GitHub Container Registry
        uses: docker/login-action@v3 # 使用 Docker 官方的登录 action
        with:
          registry: ghcr.io # 指定镜像仓库为 ghcr.io
          username: ${{ github.actor }} # 使用触发工作流程的用户名
          password: ${{ secrets.GITHUB_TOKEN }} # 使用 GitHub 自动生成的 GITHUB_TOKEN 进行身份验证

      - name: 为 Docker 提取元数据 (标签、标记)
        id: meta # 给这个步骤设置一个 ID，方便后续引用其输出
        uses: docker/metadata-action@v5 # 使用 Docker 官方的元数据 action
        with:
          images: ghcr.io/${{ github.repository_owner }}/libretv # 镜像名称格式：ghcr.io/仓库所有者/镜像名
          # 定义如何生成镜像标签:
          # - type=schedule # 基于计划任务
          # - type=ref,event=branch # 基于分支
          # - type=ref,event=pr # 基于拉取请求
          # - type=semver,pattern={{version}} # 基于语义化版本号 (完整版)
          # - type=semver,pattern={{major}}.{{minor}} # 基于语义化版本号 (主版本.次版本)
          # - type=semver,pattern={{major}} # 基于语义化版本号 (主版本)
          # - type=sha # 基于 Git SHA
          # 此示例为推送到 main 分支和推送标签时生成常用标签组合
          tags: |
            # 当推送到默认分支时，标记为 latest
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3 # 使用 Docker 官方的 setup-buildx action，用于启用更高级的构建功能

      - name: 构建并推送 Docker 镜像
        uses: docker/build-push-action@v6 # 使用 Docker 官方的 build-push action
        with:
          context: . # Docker 构建上下文，设置为当前目录
          file: ./Dockerfile # Dockerfile 的路径
          push: true # 构建完成后推送到镜像仓库
          tags: ${{ steps.meta.outputs.tags }} # 使用元数据 action 生成的标签
          labels: ${{ steps.meta.outputs.labels }} # 使用元数据 action 生成的标记
          cache-from: type=gha # 从 GitHub Actions 缓存中加载 Docker 层缓存
          cache-to: type=gha,mode=max # 将 Docker 层缓存保存到 GitHub Actions 缓存 (使用最大模式)
